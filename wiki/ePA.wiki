#summary Commands for Electronic Identification Documents
#sidebar Navigation

*NOTE:* Some of these commands may not be available in the /trunk of the repository. At the time of writing, there is a branch `epa` where the commands have been included. This was done due to the fact that the logging of communication was disabled in the process of removing a limitation of the firmware. You can get the branch from the svn via:
{{{
svn checkout https://proxmark3.googlecode.com/svn/branches/epa/
}}}
Hopefully this branch will be merged into the /trunk soon when logging functionality has been restored.

= Introduction =
Commands related to electronic identification documents such as the German electronic "Personalausweis" (ePA) can be invoked from the *`hf epa`* command subtree.

{{{
     proxmark3> hf epa
help             This help
cnonces          <m> <n> Acquire n>0 encrypted PACE nonces of size m>0
preplay          <mse> <map> <pka> <ma> Perform PACE protocol by replaying given APDUs
}}}


= Details =
For details on the protocols such as PACE, see the technical guideline TR-03110 of the BSI at [https://www.bsi.bund.de/ContentBSI/EN/Publications/Techguidelines/TR03110/BSITR03110.html]

=== hf epa cnonces ===
This command collects encrypted random nonces generated by the card during the PACE protocol.
It takes two parameters. The first specifies the requested nonce length in bytes. Note that the actual length might differ from the requested (e.g. a card might return a 16-byte nonce although 17 bytes were requested). The second parameter specifies the number of nonces to be collected.
The nonces are encrypted with the card's CAN (Card Access Number).
The output is encased in two timestamps to determine the duration of the procedure.

Example:
{{{
proxmark3> hf epa cnonces 16 10
Collecting 10 16-byte nonces          
Start: 1346190614          
Length: 16, Nonce: 4482CF53E8953501DE514AD911C5F582          
Length: 16, Nonce: 0BA4CAE41861E9CEEA18259777FC1200          
Length: 16, Nonce: F6EC27CAD879BA2A821459A10D276CBE          
Error in step 4, Return code: -1          
Length: 16, Nonce: 34B0FEB482E12F35FD5E3C2D61B6AFA1          
Length: 16, Nonce: 064361A19139DE9B55E56FD3323B1DC0          
Length: 16, Nonce: CDEF0534DCC42B62BD4634E3202D78E3          
Length: 16, Nonce: BBB4A6FA5FA6B8029B7713B556B993F9          
Length: 16, Nonce: B4B1767F7E7F44ADF8D33385E3DD9810          
Length: 16, Nonce: 31AD686DC42DF56205AB73496A2CCBC6          
End: 1346190627          
}}}

===hf epa preplay===
This command attempts to fake a PACE handshake by replaying arbitrary APDUs to the card. The APDUs are not collected automatically but have to be supplied by the user. One way to get these APDUs on a Linux computer is by running `pcscd` with the `-a` command line switch, using the card on a PCSC-compliant reader and extracting the relevant data from the log.

The command takes 4 arguments, each is one APDU in hexadecimal notation (e.g. `10860000027C0000`). The APDUs are sent to the card one after another, usually resulting in an error in step 5 (`General Authenticate: Perform Key Agreement`) because the data in the APDUs does not fit the data sent by the card. The response times are measured and printed. Time measurement is started when the Proxmark III starts sending one APDU and is stopped when it finishes receiving the card's answer. The unit of measurement is microseconds (us).

In addition, the status word of the last response APDU is printed if an error occurred.

Example:
{{{
proxmark3> hf epa preplay 0022C1A40F800A04007F00070202040202830102 10860000027C0000 10860000457C43814104256FC9214A5BE4454255E729012081D9AB79730BD342CDA26D87786CF8B64E105F6DD7169403BF6482842EFBED1455A19B1147CD88C82EF28D73F4DA1B88730200 10860000457C43834104A97D1968B6CB7BBD705DE5D8FC13E14821C2156CB498E8937E2979B226DCD3AB7059EE21461122AB85A1867EB82B89FEFB5C68D27BCB4B99A3B1520643BC9C0400 008600000C7C0A8508518B385EA1EB0F9D00
#db# Status word: 0x6A80       
PACE replay failed in step 5!
Measured times:
MSE Set AT: 61568 us
GA Get Nonce: 84046 us
GA Map Nonce: 332170 us
GA Perform Key Agreement: 136912 us
GA Mutual Authenticate: 0 us
}}}