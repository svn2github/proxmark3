<wiki:toc>
=Generic notes=
==Flash sections==
The firmware of the proxmark3 contains three distinct sections that can be flashed independently: bootloader, fpga image and os image.

===Bootloader===
  * File name: `bootrom/obj/bootrom.s19`

The *bootloader* (sometimes also called bootrom) is a small piece of code that enables writing to the flash over USB in the first place. It's updated very infrequently and, due to its importance, should be left alone most of the time. As long as your bootloader is intact you can recover any firmware error of your proxmark3 with just an USB connection and the provided flash tools. When you destroy your bootloader, you will need a JTAG connection and associated tools to recover the device.

===FPGA image===
  * File name: `armsrc/obj/fpgaimage.s19`

The *FPGA image* is the configuration/code that runs on the FPGA that sits on the proxmark3. Since the FPGA doesn't have flash memory of its own, this configuration is stored in the flash memory of the ARM processor and downloaded into the FPGA on each boot of the device. The FPGA code (called bit stream) is updated fairly infrequently, and special tools are needed to compile the bit stream from the verilog sources. The proxmark3 firmware source releases and SVN checkouts always contain a compiled bit stream (in fpga/fpga.bit) which is then simply wrapped into an image file for you to flash onto the proxmark3.

===OS image===
  * File name: `armsrc/obj/osimage.s19`

The *OS image* is the main firmware code that runs on your proxmark3. It is developed and regularly updated in the SVN, but if you don't need the latest features you are well off using the provided binary releases. (Note also: since the SVN is considered eternal work-in-progess, a current SVN version might not work or even build.) The OS image and FPGA image work in tandem, so you should always flash them from the same SVN revision.

==Flash tool==
  * Windows: `winsrc\prox.exe (bootrom|fpga|os) ...`
  * Linux: `linux/flasher (bootrom|fpga|os) ...`

===Entering the bootloader===
Since the proxmark3 can execute in two distinct modes (main os, and bootloader) it needs to be in bootloader mode if you want to write to the flash. There are two ways of entering bootloader mode:
  # If you press (and keep pressed) the button on the proxmark3 while applying power (or resetting the device) it will enter bootloader mode right away. This is indicated by the yellow and red LEDs staying on and the green and other red LED being off. If you let go of the button, the bootloader will exit and (try to) give control to the os image.
  # If your osimage is intact, the bootloader can also be entered by request of the flash tool. In this case you don't need to do anything. If you press the button while the bootloader is active, your button press will override the flash tool request and the device will stay in bootloader mode as long as you keep the button pressed. That means: pressing and releasing the button aborts bootloader mode.

The second option only works with a new bootrom and a new osimage (SVN revision 201 or later; summer '09 release or later), the first option should always work with all bootroms since at least SVN revision 2.

==Host tool==
  * Windows: `winsrc\prox.exe gui`
  * Linux: `linux/proxmark3`

==Known incompatibilities==
Unless otherwise noted these incompatibilities are not mutual, f.e. a new flash tool will work with both new and old bootroms.
  * Bootroms since SVN revision 201 will not work with the Linux flash tool before SVN revision 200 or Windows flash tool before SVN revision 209. If in doubt, use both bootrom and flash tool from the latest release (summer '09).
  * FPGA image since SVN revision 179 will not work with OS image before SVN revision 179 due to a changed FPGA image format.
  * OS image and host tools before and after SVN revision 137 are mutually incompatible due to an inadvertent change. This only affects a small number of host tool commands, including hisamples and losim.

=Prerequisites for compiling from source=
For the `bootrom` and `armsrc` directories you need GNU make and a GNU arm toolchain (at least gcc and binutils). For Windows a complete ARM toolchain is provided in the "Windows development environment" zip file. For Linux you need to get your own toolchain, though there is a script in tools/install-gnuarm4.sh that can greatly automate the process. Optionally, to build images that contain version information, you need perl (provided in the Windows development environment) and svn.

For the `linux` directory you need pkg-config, gcc, GNU binutils, GNU make, libusb, libreadline, QtCore, QtGui as well as the header/development files for the latter four packages.

For the `winsrc` directory you need FIXME. This is provided in the "Windows development environment" zip file.

=Windows Platform=
== Setting up Subversion ==
In order to obtain the latest source code you need to check it out of the SVN repository. To do that you can use any number of free clients. This guide will show you how to use Subcommander which is a good choice for n00bs as it has a graphical interface and does not require command line access.

 * Download and install [http://subcommander.tigris.org/ Subcommander].
 * Run it and from the Bookmark menu select "new project"
 * In the Project Name field type {{{proxmark}}}, then click Next.
 * In this window, leave the fields blank, just click Next.
 * In the URL field enter {{{http://proxmark3.googlecode.com/svn/trunk/ }}} and click Next.
 * On the next screen, do not enter anything, just press Finish.
You're now ready to download the source code. In your Projects pane on the left, expand the proxmark tree and you should now see an entry called {{{trunk}}}. Right click on it and select {{{check out}}} from the menu. In the working copy path field type {{{C:\prox-dev\proxmark}}} then click OK and wait for the checkout to complete.

Using your file explorer, browse to C:\prox-dev\proxmark and you should see a number of subdirectories with source files in them. Rejoice!

== Setting up the compile environment ==

Download the [http://proxmark3.googlecode.com/files/2009.09.05.ProxSpace.zip Compile Environment] archive.

Extract the archive to C:\prox-dev then check that you have the following subdirectories:
 * devkitARM
 * devkitWIN
 * proxmark
If not, move the extracted directories so that they sit inside C:\prox-dev
== Compiling the code ==

Browse to the folder C:\prox-dev\proxmark\cockpit and run the file
{{{
0setpath.bat
}}}
A command window opens up.
At the prompt type
{{{
5makeall.bat
}}}
and wait for the compile to finish.
 * Check the directory C:\prox-dev\proxmark\armsrc\obj to find the files fpgaimage.s19 and osimage.s19
 * Check the directory C:\prox-dev\proxmark\bootrom\obj to find the file bootrom.s19
 * Check the directory C:\prox-dev\proxmark\winsrc to find the file prox.exe
If you see these files, the compile was successful. It is *not* necessary to have the PM3 board connected via USB in order to compile the code.
== Flashing the board ==

Browse to the folder C:\prox-dev\proxmark\cockpit and run the file
{{{
0setpath.bat
}}}
A command window opens up.

===Flashing the bootloader===
Note: Since SVN revision 201 (2009-09-01 16:44:38 +0200) the bootloader protocol is incompatible with old flash tools. Please use only new flash tools to prevent any problems. The new Linux flash tool is available since SVN revision 200, the new Windows flash tool is available since SVN revision 209.

You only have to do this step once if you have an older or unknown firmware board. It is *not recommended* to keep reflashing the bootloader every time there's a code change *unless the change applies to the bootloader*. It is however strongly recommended to update to the new revision 201 bootloader (as included in the summer '09 release), if you don't already have it (the flash tool will inform you of this).

Type
{{{
prox bootrom ..\bootrom\obj\bootrom.s19
}}}
but do not press enter yet.

  * For old bootloaders (before SVN revision 201/summer '09 release): Connect the USB cable to the board while holding the button on the PM3 board down. While continuing to hold the PM3 button down, press enter on the keyboard. Only release the PM3 button when the flash operation has completed.
  * For new bootloaders and osimages (after and including the summer '09 release): You don't have to do anything, the proxmark will automatically enter the bootloader, complete the flash sequence and reset into the OS. If you press and release the button while the bootloader is active, you'll abort the flash process, so don't do that. However, the old procedure (press button before applying power to the proxmark and keep it pressed until the flashing is complete) should still work.


===Flashing the FPGA===
You only have to flash the FPGA if there has been a change in the FPGA code. This happens fairly infrequently.

Connect the PM3 board via the USB cable. Type
{{{
prox fpga ..\armsrc\obj\fpgaimage.s19
}}}
and hit enter. See above for button pressing instructions.

===Flashing the ARM===
This is the code that changes most often and needs to be flashed.

Connect the PM3 board via the USB cable. Type
{{{
prox os ..\armsrc\obj\osimage.s19
}}}
and hit enter. See above for button pressing instructions.

===Flashing more than one partition at a time===
With the new flash tool you can do things like
{{{
prox os,fpga ..\armsrc\obj\osimage.s19 ..\armsrc\obj\fpgaimage.s19
}}}


=Linux Platform=

== Setting up Subversion ==
Install subversion through whatever method is preferred on you distribution. For Ubuntu and other Debian-like distributions that would be
{{{
sudo aptitude install subversion
}}}

Check out the proxmark3 subversion directory below your home directory and change into it:
{{{
svn co http://proxmark3.googlecode.com/svn/trunk proxmark3-read-only
cd proxmark3-read-only
}}}

== Getting the prerequisites ==
Host tool: For Ubuntu/Debian you need to do
{{{
sudo aptitude install build-essential libreadline5 libreadline-dev libusb-0.1-4 libusb-dev libqt4-dev perl pkg-config
}}}

ARM toolchain: First make sure that wget is installed (Ubuntu/Debian: `sudo aptitude install wget` then use the provided automatic toolchain build script like this:
{{{
tools/install-gnuarm4.sh ~/gnuarm `pwd`/tmp
}}}

This will build the toolchain and keep temporary directories in `tmp` under the current directory and install the toolchain to `gnuarm` under your home directory. When the build is finished it will output something like `set environment variable ARMLIB to /home/YOURUSERNAME/gnuarm/lib/gcc/arm-elf/4.3.3/interwork`. Follow this advice by executing:
{{{
export ARMLIB=/home/YOURUSERNAME/gnuarm/lib/gcc/arm-elf/4.3.3/interwork
export PATH=${PATH}:/home/YOURUSERNAME/gnuarm/bin/
}}}
You should also append these two lines to your `~/.bashrc` so that they apply every time you login.

== Building ==
You are now ready to simply execute 
{{{
make
}}}
from the main proxmark directory which will build all parts: bootrom (check that `bootrom/obj/bootrom.s19` is created), fpga image (`armsrc/obj/fpgaimage.s19`), os image (`armsrc/obj/osimage.s19`) and the host tool (`linux/proxmark3`).

== Flashing the board ==

Browse to the linux source folder in your SVN repo: .../linux
 
===Flashing the bootloader===
 
Note: Since SVN revision 201 (2009-09-01 16:44:38 +0200) the bootloader protocol is incompatible with old flash tools. Please use only new flash tools to prevent any problems. The new Linux flash tool is available since SVN revision 200, the new Windows flash tool is available since SVN revision 209.

You only have to do this step once if you have an older or unknown firmware board. It is *not recommended* to keep reflashing the bootloader every time there's a code change *unless the change applies to the bootloader*. It is however strongly recommended to update to the new revision 201 bootloader (as included in the summer '09 release), if you don't already have it (the flash tool will inform you of this).
 
Type

{{{
./flasher bootrom ../bootrom/obj/bootrom.s19
}}}

but do not press enter yet.

  * For old bootloaders (before SVN revision 201/summer '09 release): Connect the USB cable to the board while holding the button on the PM3 board down. While continuing to hold the PM3 button down, press enter on the keyboard. Only release the PM3 button when the flash operation has completed.
  * For new bootloaders and osimages (after and including the summer '09 release): You don't have to do anything, the proxmark will automatically enter the bootloader, complete the flash sequence and reset into the OS. If you press and release the button while the bootloader is active, you'll abort the flash process, so don't do that. However, the old procedure (press button before applying power to the proxmark and keep it pressed until the flashing is complete) should still work.

===Flashing the FPGA===

You only have to flash the FPGA if there has been a change in the FPGA code. This happens fairly infrequently.

Connect the PM3 board via the USB cable. Type
 
{{{ 
./flasher fpga ../armsrc/obj/fpgaimage.s19
}}}
 
and hit enter. See above for button pressing instructions.

===Flashing the ARM===
 
This is the code that changes most often and needs to be flashed.

Connect the PM3 board via the USB cable. Type
 
{{{
./flasher os ../armsrc/obj/osimage.s19
}}}
and hit enter. See above for button pressing instructions.

===Flashing both the FPGA and the ARM in one go===

If you know you need to flash both FPGA and ARM code, this will save time as it will not reboot the PM3 between flashes.

Connect the PM3 board via the USB cable. Type

{{{
./flasher os,fpga ../armsrc/obj/osimage.s19 ../armsrc/obj/fpgaimage.s19
}}}

and hit enter. See above for button pressing instructions. 

=OSX Platform=

To be added.